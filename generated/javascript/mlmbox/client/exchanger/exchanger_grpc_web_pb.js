/**
 * @fileoverview gRPC-Web generated client stub for mlmbox.client.exchanger
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.2
// source: mlmbox/client/exchanger/exchanger.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')

var mlmbox_types_exchanger_pb = require('../../../mlmbox/types/exchanger_pb.js')
const proto = {};
proto.mlmbox = {};
proto.mlmbox.client = {};
proto.mlmbox.client.exchanger = require('./exchanger_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.mlmbox.client.exchanger.ExchangerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.mlmbox.client.exchanger.ExchangerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.mlmbox.types.Exchanger.Id,
 *   !proto.mlmbox.types.Exchanger>}
 */
const methodDescriptor_Exchanger_Get = new grpc.web.MethodDescriptor(
  '/mlmbox.client.exchanger.Exchanger/Get',
  grpc.web.MethodType.UNARY,
  mlmbox_types_exchanger_pb.Exchanger.Id,
  mlmbox_types_exchanger_pb.Exchanger,
  /**
   * @param {!proto.mlmbox.types.Exchanger.Id} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  mlmbox_types_exchanger_pb.Exchanger.deserializeBinary
);


/**
 * @param {!proto.mlmbox.types.Exchanger.Id} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.mlmbox.types.Exchanger)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.mlmbox.types.Exchanger>|undefined}
 *     The XHR Node Readable Stream
 */
proto.mlmbox.client.exchanger.ExchangerClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/mlmbox.client.exchanger.Exchanger/Get',
      request,
      metadata || {},
      methodDescriptor_Exchanger_Get,
      callback);
};


/**
 * @param {!proto.mlmbox.types.Exchanger.Id} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.mlmbox.types.Exchanger>}
 *     Promise that resolves to the response
 */
proto.mlmbox.client.exchanger.ExchangerPromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/mlmbox.client.exchanger.Exchanger/Get',
      request,
      metadata || {},
      methodDescriptor_Exchanger_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.mlmbox.types.Exchanger.List>}
 */
const methodDescriptor_Exchanger_All = new grpc.web.MethodDescriptor(
  '/mlmbox.client.exchanger.Exchanger/All',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  mlmbox_types_exchanger_pb.Exchanger.List,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  mlmbox_types_exchanger_pb.Exchanger.List.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.mlmbox.types.Exchanger.List)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.mlmbox.types.Exchanger.List>|undefined}
 *     The XHR Node Readable Stream
 */
proto.mlmbox.client.exchanger.ExchangerClient.prototype.all =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/mlmbox.client.exchanger.Exchanger/All',
      request,
      metadata || {},
      methodDescriptor_Exchanger_All,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.mlmbox.types.Exchanger.List>}
 *     Promise that resolves to the response
 */
proto.mlmbox.client.exchanger.ExchangerPromiseClient.prototype.all =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/mlmbox.client.exchanger.Exchanger/All',
      request,
      metadata || {},
      methodDescriptor_Exchanger_All);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.mlmbox.types.Exchanger.Request,
 *   !proto.mlmbox.types.Exchanger.Response>}
 */
const methodDescriptor_Exchanger_Preview = new grpc.web.MethodDescriptor(
  '/mlmbox.client.exchanger.Exchanger/Preview',
  grpc.web.MethodType.UNARY,
  mlmbox_types_exchanger_pb.Exchanger.Request,
  mlmbox_types_exchanger_pb.Exchanger.Response,
  /**
   * @param {!proto.mlmbox.types.Exchanger.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  mlmbox_types_exchanger_pb.Exchanger.Response.deserializeBinary
);


/**
 * @param {!proto.mlmbox.types.Exchanger.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.mlmbox.types.Exchanger.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.mlmbox.types.Exchanger.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.mlmbox.client.exchanger.ExchangerClient.prototype.preview =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/mlmbox.client.exchanger.Exchanger/Preview',
      request,
      metadata || {},
      methodDescriptor_Exchanger_Preview,
      callback);
};


/**
 * @param {!proto.mlmbox.types.Exchanger.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.mlmbox.types.Exchanger.Response>}
 *     Promise that resolves to the response
 */
proto.mlmbox.client.exchanger.ExchangerPromiseClient.prototype.preview =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/mlmbox.client.exchanger.Exchanger/Preview',
      request,
      metadata || {},
      methodDescriptor_Exchanger_Preview);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.mlmbox.types.Exchanger.Request,
 *   !proto.mlmbox.types.Exchanger.Response>}
 */
const methodDescriptor_Exchanger_Verified = new grpc.web.MethodDescriptor(
  '/mlmbox.client.exchanger.Exchanger/Verified',
  grpc.web.MethodType.UNARY,
  mlmbox_types_exchanger_pb.Exchanger.Request,
  mlmbox_types_exchanger_pb.Exchanger.Response,
  /**
   * @param {!proto.mlmbox.types.Exchanger.Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  mlmbox_types_exchanger_pb.Exchanger.Response.deserializeBinary
);


/**
 * @param {!proto.mlmbox.types.Exchanger.Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.mlmbox.types.Exchanger.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.mlmbox.types.Exchanger.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.mlmbox.client.exchanger.ExchangerClient.prototype.verified =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/mlmbox.client.exchanger.Exchanger/Verified',
      request,
      metadata || {},
      methodDescriptor_Exchanger_Verified,
      callback);
};


/**
 * @param {!proto.mlmbox.types.Exchanger.Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.mlmbox.types.Exchanger.Response>}
 *     Promise that resolves to the response
 */
proto.mlmbox.client.exchanger.ExchangerPromiseClient.prototype.verified =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/mlmbox.client.exchanger.Exchanger/Verified',
      request,
      metadata || {},
      methodDescriptor_Exchanger_Verified);
};


module.exports = proto.mlmbox.client.exchanger;

